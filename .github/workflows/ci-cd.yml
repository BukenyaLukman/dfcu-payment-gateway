name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  HEROKU_APP_NAME: dfcu-payment-gateway
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Create test env file
      run: |
        echo "DB_URL=jdbc:h2:mem:testdb" > .env
        echo "DB_USERNAME=sa" >> .env
        echo "DB_PASSWORD=" >> .env
        echo "CORS_ALLOWED_ORIGINS=http://localhost:3000" >> .env

    - name: Build and Test Backend
      run: mvn clean test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install-ubuntu.sh | sh

    - name: Setup Heroku Credentials
      run: |
        cat > ~/.netrc <<EOF
        machine api.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
        machine git.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
        EOF
        chmod 600 ~/.netrc

    - name: Create heroku.yml
      run: |
        cat > heroku.yml <<EOF
        setup:
          addons:
            - plan: heroku-postgresql
              as: DATABASE
        
        build:
          docker:
            web: Dockerfile
        
        run:
          web: java -jar target/*.jar
        EOF

    - name: Check and Set Heroku Stack
      run: |
        # Check if app exists
        if ! heroku apps:info --app $HEROKU_APP_NAME &>/dev/null; then
          echo "Creating new app..."
          heroku apps:create $HEROKU_APP_NAME
        fi
        
        # Set stack to container
        echo "Setting stack to container..."
        heroku stack:set container --app $HEROKU_APP_NAME || true
        
        # Verify stack
        STACK=$(heroku stack --app $HEROKU_APP_NAME)
        echo "Current stack: $STACK"
        
        if [[ "$STACK" != *"container"* ]]; then
          echo "Failed to set container stack"
          exit 1
        fi

    - name: Login to Heroku Container Registry
      run: heroku container:login

    - name: Build and Push Docker Image
      run: |
        docker build -t registry.heroku.com/$HEROKU_APP_NAME/web .
        docker push registry.heroku.com/$HEROKU_APP_NAME/web

    - name: Release
      run: heroku container:release web --app $HEROKU_APP_NAME 